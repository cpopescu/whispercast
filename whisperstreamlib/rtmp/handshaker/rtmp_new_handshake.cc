// Copyright 2009 WhisperSoft s.r.l.

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "sha256.h"

static const int kHandshakeSize = 1536;   // protocol specific
static const int kDigestPosBegin = 2 * 4; // sizeof(int32);

static const int kDigestPosBegin_V_1_2 = 2 * 4;
static const int kDigestPosBegin_V_3 = 772;

static const int kDigestPosSize  = 4;     // sizeof(int32);
static const int kSha256DigestSize  = 32;
static const int kHandshakeDataSize = kHandshakeSize - kSha256DigestSize;

// Versions (what we get in bytes 4-7 from client handshake:

// 10.0.32.18 --> 128.0.3.2 -> V3
// 10.0.22.87 --> 128.0.1.2 -> V1
// 10.0.12.36 --> 10.0.12.2 -> V1

static const int kVer_10_0_32_18 = 0x80000302;
static const int kVer_10_0_22_87 = 0x80000102;
static const int kVer_10_0_12_36 = 0x0a000c02;


#ifdef __cplusplus
extern "C" {
#endif

static bool IsV3Handshake(u_int32_t version) {
  return ((version >> 24) > 0x80 ||
          ((version >> 24) == 0x80 &&
           ((version >> 8) & 0xff) >= 0x03));
}
typedef u_int8_t byte;
// Original Key:
//
 static const byte kHandshakeServerKey[] =  {
   0x47, 0x65, 0x6e, 0x75,
   0x69, 0x6e, 0x65, 0x20,
   0x41, 0x64, 0x6f, 0x62,
   0x65, 0x20, 0x46, 0x6c,   // 16
   0x61, 0x73, 0x68, 0x20,
   0x4d, 0x65, 0x64, 0x69,
   0x61, 0x20, 0x53, 0x65,
   0x72, 0x76, 0x65, 0x72,   // 32
   0x20, 0x30, 0x30, 0x31,
   0xf0, 0xee, 0xc2, 0x4a,
   0x80, 0x68, 0xbe, 0xe8,
   0x2e, 0x00, 0xd0, 0xd1,   // 48
   0x02, 0x9e, 0x7e, 0x57,
   0x6e, 0xec, 0x5d, 0x2d,
   0x29, 0x80, 0x6f, 0xab,
   0x93, 0xb8, 0xe6, 0x36,   // 64
   0xcf, 0xeb, 0x31, 0xae
 };

static const byte kHandshakeClientKey[] =  {
   0x47, 0x65, 0x6e, 0x75,
   0x69, 0x6e, 0x65, 0x20,
   0x41, 0x64, 0x6f, 0x62,
   0x65, 0x20, 0x46, 0x6c,
   0x61, 0x73, 0x68, 0x20,
   0x50, 0x6c, 0x61, 0x79,
   0x65, 0x72, 0x20, 0x30,
   0x30, 0x31, 0xf0, 0xee,
   0xc2, 0x4a, 0x80, 0x68,
   0xbe, 0xe8, 0x2e, 0x00,
   0xd0, 0xd1, 0x02, 0x9e,
   0x7e, 0x57, 0x6e, 0xec,
   0x5d, 0x2d, 0x29, 0x80,
   0x6f, 0xab, 0x93, 0xb8,
   0xe6, 0x36, 0xcf, 0xeb,
   0x31, 0xae
};


int GetDigestPosition(const byte* data, int cb, u_int32_t version) {
  const int begin_offset = IsV3Handshake(version)
                           ? kDigestPosBegin_V_3 : kDigestPosBegin_V_1_2;
  if ( cb < begin_offset + kDigestPosSize ) {
    return -1;
  }
  int pos = 0;
  for ( int i = 0; i < kDigestPosSize; ++i ) {
    pos += static_cast<int>(data[begin_offset  + i]) & 0xff;
  }
  pos = begin_offset  + kDigestPosSize + (pos % 0x02d8);
  if ( pos + kSha256DigestSize >= cb ) {
    return -1;
  }
  return pos;
}

//////////////////////////////////////////////////////////////////////
//
// Some pre-cooked hand-shakes..
//

static const byte kServerV3HandshakeBlock[kHandshakeSize] = {
  0x03, 0xe7, 0x17, 0x80, 0x03, 0x05, 0x01, 0x01,
  0x84, 0x1b, 0x63, 0x3a, 0x34, 0xcf, 0x27, 0xdf,
  0x44, 0x0f, 0xc1, 0x29, 0x93, 0x43, 0x4e, 0xb9,
  0x92, 0x19, 0x78, 0x70, 0x70, 0xba, 0x73, 0xe0,
  0xe5, 0x43, 0xfe, 0x8c, 0x60, 0x40, 0x99, 0xd7,
  0x72, 0x21, 0xe8, 0x19, 0x42, 0x8b, 0x91, 0x58,
  0xee, 0x67, 0x4c, 0xde, 0x36, 0x73, 0x79, 0xd0,
  0x09, 0x36, 0xe1, 0xfc, 0x17, 0xb2, 0xce, 0x43,
  0x41, 0x49, 0x54, 0x16, 0x8b, 0xfb, 0x38, 0x73,
  0x85, 0xae, 0x56, 0x19, 0x57, 0x4a, 0xb7, 0x1a,
  0x43, 0x7b, 0x99, 0x64, 0xd8, 0x27, 0x09, 0x50,
  0x25, 0x68, 0x59, 0x3c, 0x28, 0x8e, 0xa0, 0xd8,
  0x54, 0xfe, 0x31, 0x9c, 0xcc, 0xe9, 0x78, 0x4c,
  0xb2, 0x6c, 0xe8, 0x56, 0x4f, 0xb6, 0xab, 0x50,
  0x16, 0xb6, 0xa0, 0x4c, 0xa6, 0x9b, 0x28, 0xb4,
  0x3e, 0x72, 0x92, 0xa1, 0x5c, 0x07, 0x46, 0xef,
  0xcb, 0x54, 0x64, 0x02, 0xcf, 0xbc, 0x8c, 0x7d,
  0xe3, 0x61, 0xc5, 0xc6, 0x6c, 0x14, 0x6f, 0x9f,
  0xa5, 0x64, 0x83, 0xb9, 0x57, 0x09, 0x09, 0x80,
  0xcb, 0x19, 0x5c, 0xb0, 0x14, 0x7a, 0x2e, 0x97,
  0x11, 0xbd, 0x54, 0x90, 0x35, 0xed, 0x57, 0x82,
  0x5a, 0x9b, 0x43, 0xae, 0x86, 0x75, 0xe9, 0x44,
  0x3e, 0xdb, 0x4a, 0x0e, 0x45, 0xe7, 0x73, 0x30,
  0xd8, 0x41, 0x45, 0x51, 0x03, 0xbb, 0xb8, 0x94,
  0x1a, 0x21, 0xc3, 0xde, 0x5f, 0x17, 0x77, 0x08,
  0x91, 0x5f, 0xe9, 0xbf, 0x7e, 0xb1, 0x64, 0x55,
  0xd4, 0xd9, 0x5d, 0xbc, 0x9c, 0xd1, 0xaf, 0xa7,
  0xa3, 0xce, 0x9e, 0x03, 0xab, 0x41, 0xa9, 0x2b,
  0x2f, 0x83, 0x0f, 0xa3, 0x82, 0xa5, 0x50, 0xd1,
  0x05, 0x4d, 0xea, 0x02, 0x32, 0xbf, 0x42, 0x9f,
  0xa4, 0x86, 0x99, 0x66, 0xc9, 0xd4, 0x6f, 0xbc,
  0xa8, 0xe8, 0x1a, 0x5e, 0x2f, 0x77, 0x25, 0xcb,
  0x17, 0x37, 0x58, 0xcd, 0x5b, 0xef, 0x34, 0x30,
  0xf3, 0x37, 0xe8, 0x03, 0x89, 0xe8, 0x21, 0xd6,
  0x7c, 0x66, 0x27, 0xae, 0x3d, 0x55, 0x25, 0xa8,
  0x5c, 0x58, 0x7b, 0x17, 0x8f, 0x28, 0x61, 0x56,
  0xd6, 0xfa, 0x05, 0x17, 0x26, 0x09, 0xfc, 0x51,
  0x32, 0xdc, 0x5b, 0xd9, 0x4e, 0xbb, 0xc4, 0x19,
  0x49, 0xe6, 0xfa, 0xc1, 0xa3, 0x2b, 0xfd, 0x5e,
  0x43, 0xd3, 0x20, 0xdc, 0x34, 0x3d, 0x2a, 0x61,
  0x4f, 0x41, 0xe7, 0xea, 0x87, 0xef, 0xa2, 0xd4,
  0x95, 0xfd, 0xe6, 0x8d, 0x89, 0x01, 0xe6, 0x79,
  0x2e, 0x52, 0xf4, 0x2d, 0x3d, 0x84, 0xfc, 0x8d,
  0x66, 0x88, 0x53, 0x9c, 0xb4, 0xa7, 0x25, 0x4b,
  0x99, 0x65, 0x4c, 0x28, 0xa7, 0x4d, 0xdc, 0xf7,
  0xbf, 0xa3, 0x7d, 0x9d, 0x00, 0xad, 0x66, 0x6c,
  0x36, 0x02, 0x8a, 0xda, 0x28, 0x87, 0xd9, 0x05,
  0xae, 0x3a, 0xc2, 0xe7, 0x4b, 0x00, 0xef, 0x23,
  0xa7, 0x71, 0xca, 0x40, 0xd5, 0x29, 0x60, 0x87,
  0xed, 0xc0, 0x61, 0xd8, 0xc2, 0x29, 0xe6, 0xcb,
  0xcf, 0x2d, 0x22, 0x78, 0x15, 0xb2, 0xef, 0x93,
  0x38, 0x5e, 0x82, 0xb1, 0xb6, 0xd6, 0x3b, 0xc0,
  0x75, 0x04, 0x07, 0xe7, 0x4d, 0x15, 0xde, 0x8d,
  0x2c, 0x9b, 0x84, 0x0d, 0xa3, 0xa9, 0x31, 0xc6,
  0x03, 0xa2, 0xa3, 0x9b, 0x23, 0xaa, 0x9f, 0x1d,
  0xd9, 0x22, 0xd0, 0x95, 0xd2, 0x54, 0x2e, 0x7d,
  0x5b, 0x8e, 0x68, 0x6c, 0x39, 0x6b, 0xed, 0xca,
  0x65, 0xb1, 0x0e, 0xe4, 0x3c, 0xbb, 0xb0, 0x7f,
  0xc6, 0xb0, 0x13, 0x32, 0xc9, 0x32, 0x00, 0x30,
  0xd8, 0x2a, 0x04, 0xf3, 0x84, 0xde, 0x4a, 0x31,
  0xd1, 0x4f, 0x35, 0x9e, 0x3f, 0xc6, 0xaf, 0xda,
  0x43, 0x64, 0x88, 0x1f, 0x04, 0xb1, 0x3e, 0xc8,
  0x4d, 0x11, 0x48, 0x20, 0xaa, 0xec, 0x7f, 0xa8,
  0xe5, 0x3b, 0x19, 0xff, 0x39, 0x00, 0xe6, 0xda,
  0xe7, 0x6a, 0xa0, 0xaa, 0xd0, 0x94, 0xa4, 0x49,
  0x20, 0xb1, 0xf9, 0x0e, 0x6b, 0x1e, 0x7e, 0x96,
  0xf6, 0x55, 0xb0, 0x5d, 0x40, 0xfb, 0x6d, 0x4e,
  0xd0, 0x4d, 0xac, 0xdd, 0xf4, 0x60, 0x83, 0x9e,
  0x31, 0x06, 0xe9, 0xef, 0x6a, 0x8f, 0x8a, 0xe0,
  0x05, 0xea, 0x38, 0xe4, 0xe4, 0xba, 0x52, 0x4b,
  0x41, 0xdc, 0xcf, 0x3b, 0x3b, 0x2d, 0x3a, 0x64,
  0xfa, 0x90, 0x16, 0x39, 0x9d, 0xc0, 0xa1, 0xb7,
  0x64, 0xb5, 0xbe, 0xa4, 0x8f, 0xfa, 0x26, 0x50,
  0xc9, 0x3b, 0x3c, 0x95, 0xae, 0x94, 0x63, 0x88,
  0x91, 0x0e, 0x49, 0x13, 0x70, 0xef, 0x5c, 0xb5,
  0x9d, 0x7e, 0x17, 0xbe, 0xbe, 0xee, 0x07, 0xe7,
  0x85, 0x96, 0xec, 0x27, 0xbe, 0xb5, 0xe7, 0x05,
  0x70, 0x67, 0xf9, 0x15, 0xd0, 0xfd, 0xbf, 0xb8,
  0x75, 0x2d, 0x7a, 0x0c, 0xe3, 0x2e, 0xc4, 0x96,
  0xb0, 0x62, 0x90, 0xfe, 0xb6, 0x05, 0x42, 0xf0,
  0x3a, 0x9e, 0xed, 0x92, 0x76, 0x52, 0xd3, 0xa9,
  0x81, 0xdf, 0xb0, 0x66, 0xee, 0x5d, 0x4c, 0x5f,
  0x1b, 0xcb, 0x98, 0x39, 0x03, 0xfe, 0x72, 0x20,
  0x0c, 0x25, 0x7c, 0xa5, 0x83, 0xbe, 0xe3, 0x1e,
  0xec, 0xa9, 0xc7, 0x80, 0xaa, 0x7e, 0x21, 0x5a,
  0x44, 0x5d, 0x1c, 0x69, 0xeb, 0xeb, 0xfc, 0x05,
  0x92, 0x2f, 0x1d, 0xe7, 0x07, 0x92, 0xe3, 0xdf,
  0xb8, 0x85, 0x1c, 0x80, 0xc2, 0x09, 0x46, 0x83,
  0x00, 0x20, 0x9b, 0xcb, 0x12, 0xc2, 0xc8, 0xaa,
  0x38, 0x2c, 0x22, 0x69, 0xf7, 0xbb, 0x9a, 0xa3,
  0x04, 0xe8, 0xee, 0xcd, 0x01, 0x09, 0x3c, 0xb6,
  0xda, 0xc3, 0x58, 0x4c, 0xa1, 0x44, 0x3a, 0xfc,
  0xdb, 0xd4, 0x05, 0x29, 0xf2, 0x53, 0x5a, 0x37,
  0x7c, 0x78, 0x3f, 0x94, 0x2c, 0x86, 0xf3, 0x7d,
  0x49, 0xc7, 0x04, 0x0d, 0x67, 0x39, 0xd5, 0xf6,
  0x8c, 0xeb, 0x33, 0x0b, 0x2e, 0xce, 0x4e, 0x4b,
  0x28, 0x4b, 0x2b, 0x2b, 0x0b, 0x2d, 0x35, 0xb5,
  0x78, 0x09, 0x6a, 0xab, 0xde, 0xdb, 0xb8, 0xe3,
  0x10, 0x9d, 0x21, 0xb2, 0x16, 0x35, 0xd4, 0x08,
  0x1a, 0xa0, 0x91, 0xde, 0x7b, 0xf8, 0x0f, 0xd4,
  0x7a, 0x94, 0xbd, 0x4a, 0xd0, 0x66, 0xb9, 0x65,
  0x8d, 0x59, 0xaf, 0x11, 0x88, 0x95, 0x0e, 0xfa,
  0x01, 0xcf, 0x76, 0x27, 0x67, 0x14, 0x99, 0x49,
  0x3f, 0x10, 0x12, 0xa4, 0x87, 0xf2, 0x16, 0xc3,
  0x81, 0x83, 0xe6, 0x8b, 0x37, 0xa1, 0x34, 0xde,
  0x3a, 0xae, 0x71, 0x1e, 0x02, 0x94, 0x06, 0x2f,
  0xd0, 0xce, 0x44, 0xd0, 0x1a, 0x4b, 0x45, 0xf8,
  0x36, 0x3f, 0xda, 0xd8, 0x31, 0x01, 0x7d, 0xff,
  0x6e, 0xf5, 0x82, 0x43, 0x89, 0x08, 0x4d, 0x4d,
  0x6a, 0xef, 0x1f, 0xea, 0xc0, 0xf5, 0xa0, 0x35,
  0xd1, 0x64, 0xe5, 0x2e, 0x1e, 0x9b, 0x50, 0x67,
  0x00, 0x3e, 0x83, 0x92, 0x1d, 0xf0, 0xbf, 0xc5,
  0x74, 0x9a, 0x48, 0xe0, 0xd3, 0xfb, 0x40, 0x53,
  0xad, 0x27, 0xba, 0x25, 0x2e, 0x89, 0x8d, 0x2b,
  0x89, 0x4f, 0xff, 0xfe, 0x46, 0xb8, 0xc7, 0x1d,
  0x0b, 0xdf, 0x88, 0x64, 0x1b, 0x44, 0x43, 0x1a,
  0xc7, 0xcf, 0x5e, 0xdf, 0x82, 0x98, 0x32, 0x8e,
  0x56, 0x8e, 0xd3, 0xac, 0x96, 0x19, 0xfe, 0xea,
  0x08, 0x26, 0x42, 0x6c, 0x25, 0xe8, 0x11, 0x83,
  0x4d, 0x6f, 0x3e, 0x8b, 0x11, 0xec, 0x71, 0xa9,
  0x4c, 0x38, 0x98, 0x13, 0x45, 0x20, 0xf2, 0x86,
  0x49, 0x93, 0x4b, 0x31, 0xa8, 0x7a, 0x41, 0xc0,
  0x78, 0x3e, 0xa8, 0x89, 0xc4, 0xa5, 0x3f, 0x21,
  0x4c, 0x99, 0x57, 0x24, 0x96, 0x34, 0x3b, 0x50,
  0x36, 0x1d, 0x75, 0xc4, 0x10, 0x83, 0xb2, 0x01,
  0x75, 0x63, 0x27, 0x2f, 0x0c, 0xfa, 0x97, 0x02,
  0xfb, 0x72, 0x2a, 0x34, 0x3c, 0xfc, 0x93, 0x28,
  0x5d, 0x7d, 0x0e, 0xae, 0x35, 0xb7, 0xe7, 0xe1,
  0xa3, 0x8a, 0xdc, 0x9a, 0x6f, 0xcf, 0x7c, 0xb0,
  0x13, 0x79, 0x2e, 0xd5, 0xcd, 0x4a, 0x71, 0xcb,
  0xc0, 0xc8, 0x9c, 0x05, 0x9f, 0x1e, 0xde, 0x4f,
  0x50, 0x6c, 0xa9, 0x4e, 0xdc, 0x27, 0x1b, 0x9b,
  0x3b, 0x9c, 0xf9, 0xf4, 0xfd, 0x99, 0xb8, 0x70,
  0xe2, 0x1f, 0x77, 0xfb, 0xea, 0x3a, 0x06, 0x4d,
  0x0e, 0x54, 0xa1, 0xfc, 0xf0, 0xfe, 0x5e, 0x33,
  0xc8, 0x12, 0xce, 0xe9, 0x64, 0x4a, 0x60, 0xb1,
  0xd5, 0x61, 0x4e, 0xb5, 0x11, 0xc2, 0x8f, 0x98,
  0x4a, 0xe7, 0x30, 0x6e, 0x47, 0x82, 0x8a, 0xf4,
  0xff, 0x30, 0x93, 0xd2, 0xb8, 0xe6, 0x5c, 0x39,
  0xad, 0x11, 0x0c, 0x80, 0xcf, 0xb5, 0x59, 0x66,
  0x3b, 0x9b, 0x95, 0x25, 0xa3, 0x20, 0xb8, 0x51,
  0x24, 0x27, 0xc9, 0x64, 0xa8, 0x0f, 0x9f, 0x04,
  0x39, 0x6c, 0x80, 0x15, 0xdc, 0xf7, 0x4d, 0xb7,
  0xb4, 0x1a, 0x8b, 0xad, 0x80, 0xf7, 0x77, 0x1a,
  0x3c, 0xfb, 0xff, 0xf8, 0x49, 0x96, 0x85, 0x98,
  0xb3, 0x04, 0xe2, 0xdc, 0xf4, 0xc8, 0xf3, 0x7b,
  0x12, 0xb2, 0xf9, 0xf6, 0x13, 0xc5, 0x6c, 0xfa,
  0x1a, 0xec, 0x04, 0xa2, 0xd8, 0xba, 0xae, 0xb8,
  0x01, 0xe2, 0x2b, 0x3b, 0x1c, 0xc7, 0xd3, 0xdd,
  0x6d, 0xf8, 0x13, 0xf0, 0xd6, 0x77, 0xc8, 0x8d,
  0x5f, 0x10, 0x33, 0x27, 0x1c, 0x0a, 0xec, 0xdf,
  0xb4, 0x89, 0x28, 0xc3, 0xd9, 0x97, 0xe3, 0x40,
  0xe4, 0x66, 0x08, 0xf0, 0xa8, 0x7c, 0x18, 0xc3,
  0x6b, 0x25, 0x14, 0x13, 0x48, 0xff, 0xcf, 0xd1,
  0x10, 0x3b, 0xbd, 0x01, 0x9b, 0xdc, 0xfd, 0x6f,
  0xab, 0xcb, 0x49, 0x90, 0xe6, 0xe7, 0x04, 0xc4,
  0x41, 0x91, 0x9d, 0xe4, 0x86, 0x51, 0xdc, 0x2c,
  0xa0, 0xa9, 0x37, 0xc4, 0x92, 0x9e, 0x73, 0x3b,
  0x66, 0x86, 0xaa, 0x39, 0x6d, 0x3d, 0x66, 0x7f,
  0x20, 0x83, 0x82, 0xf9, 0x50, 0x93, 0x78, 0x74,
  0x57, 0xd9, 0x53, 0x78, 0x5e, 0x0f, 0x12, 0xa7,
  0x04, 0x34, 0xf6, 0xcd, 0x36, 0xf3, 0x45, 0xa5,
  0x1a, 0xf2, 0x4b, 0x4a, 0xb7, 0x1e, 0x50, 0xce,
  0xe5, 0x1e, 0x7d, 0xa3, 0xda, 0x1a, 0xc9, 0x14,
  0xd0, 0xd7, 0xbc, 0xe0, 0x30, 0x4b, 0x72, 0x84,
  0xd7, 0x07, 0x08, 0x27, 0x29, 0xf6, 0xba, 0x34,
  0xf3, 0xc1, 0xee, 0x3e, 0xbc, 0x37, 0xaf, 0x4d,
  0x0d, 0x77, 0x1f, 0x5e, 0x52, 0x82, 0xdc, 0xb5,
  0x57, 0xf3, 0xf1, 0x00, 0x9d, 0xc2, 0x78, 0x69,
  0xc4, 0x7d, 0xb4, 0x8b, 0x82, 0x99, 0xdc, 0x35,
  0x97, 0x75, 0x23, 0xf4, 0x4f, 0x1d, 0x99, 0xc5,
  0x50, 0x20, 0x72, 0x1f, 0x2e, 0x1a, 0xd4, 0x55,
  0x9a, 0xcf, 0x9d, 0xb9, 0x42, 0x91, 0x84, 0x5d,
  0xdd, 0x05, 0x07, 0xf2, 0x2a, 0xd9, 0xdc, 0x90,
  0x4e, 0x22, 0xc6, 0x0e, 0x70, 0x50, 0x72, 0x25,
  0x54, 0x6a, 0x29, 0x8b, 0x41, 0x5b, 0x73, 0xc4,
  0x3f, 0x09, 0xfe, 0xa0, 0x7b, 0x45, 0x03, 0x5e,
  0xb1, 0xf5, 0x19, 0x15, 0x83, 0x21, 0xc8, 0x28,
  0x6a, 0x49, 0xba, 0x3a, 0x94, 0xfa, 0x7a, 0x33,
  0x74, 0xee, 0xec, 0xe9, 0x6f, 0xd0, 0x8d, 0x6f,
  0x0f, 0x8b, 0x8d, 0x84, 0xbd, 0xb4, 0x34, 0x2c,
  0x3a, 0xfb, 0x25, 0xf4, 0xbc, 0x0c, 0xfd, 0x26,
  0x07, 0x9e, 0x12, 0xfb, 0xc5, 0x38, 0x6c, 0xf8,
  0x71, 0xf5, 0x25, 0xef, 0xa3, 0x3e, 0x1c, 0x21,
  0x9a, 0x55, 0x1e, 0x36, 0x50, 0xe4, 0x9e, 0xdb,
  0x04, 0x20, 0xd4, 0xcb, 0xbb, 0x5c, 0x94, 0xfe,
  0x16, 0x55, 0xa7, 0xa1, 0x5f, 0xd0, 0x40, 0xe5,
  0x0b, 0xd9, 0x4f, 0xea, 0xb3, 0xea, 0x6d, 0x65,
  0x45, 0xc4, 0x99, 0xa9, 0x3b, 0xa2, 0xc5, 0x7d,
  0xce, 0x59, 0xc6, 0xf3, 0x35, 0x12, 0x95, 0x5f,
  0x6c, 0xca, 0x25, 0x81, 0x40, 0xf9, 0xc7, 0xaa,
  0x96, 0x85, 0xb8, 0xea, 0xf4, 0x64, 0x2b, 0x1d,
};

//////////////////////////////////////////////////////////////////////

static const byte kServerV1HandshakeBlock[kHandshakeSize] = {
  0x05, 0xc5, 0xd0, 0x84, 0x03, 0x00, 0x01, 0x01,
  0x42, 0x46, 0x5b, 0xb4, 0xe9, 0x74, 0x2b, 0x65,
  0x32, 0xfe, 0x1e, 0x4a, 0xc8, 0x7e, 0xaf, 0x13,
  0x97, 0x3f, 0x40, 0x3e, 0x61, 0xb7, 0x5a, 0xbc,
  0x16, 0xe4, 0x15, 0xb1, 0xdb, 0x89, 0xee, 0x3b,
  0xf6, 0x80, 0xd1, 0x11, 0x2e, 0xcf, 0x07, 0x74,
  0x09, 0x41, 0x57, 0xd9, 0xb1, 0x2d, 0x6b, 0x17,
  0xbb, 0x69, 0xf7, 0x43, 0x6f, 0xeb, 0x85, 0xb9,
  0x70, 0x2d, 0x1d, 0x95, 0xf3, 0x2b, 0xa4, 0x05,
  0x4d, 0x27, 0x3a, 0x7d, 0x9d, 0x6d, 0x08, 0x19,
  0x7d, 0x29, 0xfd, 0xb7, 0x5a, 0x0d, 0xf7, 0x5f,
  0x2e, 0xec, 0x9a, 0x20, 0x25, 0xa5, 0x52, 0x21,
  0x0e, 0x37, 0x27, 0x1b, 0x37, 0x23, 0xf9, 0xf4,
  0xbd, 0xa3, 0x39, 0x6a, 0x8c, 0x93, 0x23, 0xcc,
  0x30, 0xf2, 0x7a, 0x4d, 0xa0, 0xa0, 0xa9, 0x7e,
  0x52, 0x02, 0xfe, 0x23, 0x5b, 0x37, 0xac, 0x3b,
  0x65, 0xea, 0xb2, 0xfa, 0x5e, 0xa3, 0xb6, 0xad,
  0xff, 0x23, 0x77, 0x5b, 0xff, 0xad, 0xa8, 0x15,
  0x1a, 0xd9, 0x18, 0x7a, 0x12, 0x71, 0xdc, 0x12,
  0xbd, 0x88, 0xf8, 0x83, 0xf6, 0x79, 0x62, 0xae,
  0x82, 0x3d, 0x27, 0x4c, 0x08, 0xd2, 0x15, 0x73,
  0x9b, 0x6a, 0xe4, 0x4f, 0x3c, 0xf1, 0x9d, 0xf2,
  0x2e, 0x1e, 0xa0, 0x22, 0x1a, 0x28, 0x4f, 0x80,
  0x68, 0xc1, 0x32, 0x07, 0x7a, 0x29, 0xb2, 0x2d,
  0x64, 0xfc, 0x64, 0x7f, 0x12, 0xa1, 0x76, 0x49,
  0xb7, 0x56, 0xa8, 0x94, 0x28, 0x81, 0x2d, 0x25,
  0x13, 0x81, 0x95, 0xcb, 0x2d, 0x39, 0xb6, 0x93,
  0x6f, 0x1e, 0x08, 0xf2, 0x11, 0x92, 0x37, 0xb9,
  0xb7, 0x13, 0x89, 0x3c, 0x4c, 0xeb, 0x61, 0x02,
  0x0e, 0xd9, 0xd5, 0x4f, 0x65, 0x00, 0x02, 0x07,
  0x28, 0xb0, 0x1d, 0x45, 0x53, 0x81, 0x71, 0x32,
  0xdc, 0xfc, 0xc4, 0x99, 0xb0, 0xaa, 0xda, 0x15,
  0xef, 0xae, 0x96, 0xf9, 0x69, 0x1a, 0x4c, 0xec,
  0x39, 0x61, 0x90, 0xe7, 0x84, 0x5c, 0x7d, 0x94,
  0x60, 0x2c, 0x3c, 0x8d, 0xac, 0x7f, 0xf6, 0x73,
  0xf6, 0x7b, 0xa9, 0x1f, 0x32, 0x0d, 0x91, 0xa0,
  0x6e, 0x7d, 0x54, 0xed, 0xa5, 0x4e, 0x33, 0x21,
  0x18, 0x33, 0xa4, 0xa4, 0xb8, 0x7a, 0xaf, 0xc1,
  0x9a, 0xdb, 0xcb, 0xd5, 0x57, 0x98, 0x08, 0x84,
  0x0c, 0xb1, 0xd4, 0x49, 0x3e, 0xcc, 0x85, 0x75,
  0x25, 0x98, 0xbe, 0x06, 0x72, 0x53, 0x42, 0x2b,
  0xc8, 0xdb, 0xf9, 0xb1, 0x88, 0x87, 0xb4, 0x7d,
  0x67, 0xcb, 0x04, 0xe8, 0x4f, 0x75, 0x1f, 0x2a,
  0xcf, 0x70, 0xb7, 0xa7, 0x2a, 0x2c, 0xe8, 0x45,
  0xae, 0x88, 0x21, 0x2e, 0x08, 0x2e, 0xf2, 0xbe,
  0xbd, 0x16, 0x6d, 0x31, 0xdd, 0xe8, 0xe2, 0x42,
  0xfc, 0x2c, 0x2e, 0x53, 0x55, 0x84, 0xb4, 0x78,
  0xb3, 0x47, 0x06, 0x27, 0xcf, 0xe5, 0x35, 0x9e,
  0xf3, 0xf8, 0x9e, 0x19, 0x31, 0xc9, 0x6b, 0x12,
  0x74, 0x7f, 0x3b, 0xed, 0xdc, 0xcf, 0x54, 0x3f,
  0x38, 0x10, 0x5e, 0xc2, 0xd6, 0x67, 0x59, 0xf0,
  0x8c, 0x81, 0xb5, 0x97, 0x3c, 0x5b, 0x99, 0x31,
  0x74, 0x8d, 0xaa, 0x8f, 0x00, 0x3d, 0xc4, 0x4c,
  0x06, 0x30, 0x47, 0xbc, 0xae, 0x2c, 0x54, 0x98,
  0x37, 0x5a, 0x78, 0xd4, 0x81, 0xd0, 0xe9, 0x93,
  0xc9, 0x72, 0xde, 0xda, 0x40, 0x81, 0x1a, 0xe9,
  0x7b, 0x0a, 0xcc, 0x8d, 0x63, 0x38, 0x9d, 0xa4,
  0x8e, 0x4c, 0x80, 0x24, 0x6d, 0xb2, 0xa1, 0xb7,
  0x88, 0xda, 0x7e, 0xcd, 0xc8, 0x3f, 0x7b, 0xdf,
  0xf2, 0xf5, 0x00, 0xf0, 0xdd, 0xc1, 0xc3, 0xe9,
  0xf4, 0x01, 0xcb, 0x38, 0x0a, 0xca, 0x0c, 0xc4,
  0x33, 0x82, 0xd0, 0x0b, 0xdf, 0xc8, 0x6b, 0xdc,
  0x38, 0x78, 0x01, 0x3c, 0x06, 0x54, 0x62, 0x06,
  0x49, 0x87, 0xd3, 0xe2, 0x21, 0x59, 0x12, 0xac,
  0x98, 0x5a, 0x55, 0x9e, 0x49, 0xbe, 0x3b, 0x2c,
  0x9d, 0xf6, 0x22, 0xd4, 0xf7, 0xe0, 0x89, 0xef,
  0xe8, 0xc0, 0x2b, 0x4d, 0x98, 0xd3, 0xcf, 0xc9,
  0xcd, 0x8c, 0x0f, 0x52, 0x5e, 0x72, 0xbb, 0xa9,
  0xe8, 0x66, 0x42, 0x65, 0x4e, 0x21, 0x38, 0xee,
  0xc6, 0xd0, 0x18, 0x43, 0x18, 0xdf, 0x0e, 0x27,
  0x2b, 0xd8, 0x82, 0xcd, 0xd6, 0xc1, 0x0f, 0x88,
  0xa5, 0xa2, 0xf2, 0xb9, 0x94, 0x5b, 0x67, 0xc8,
  0xef, 0x59, 0x5c, 0x40, 0xc8, 0x59, 0xb9, 0x96,
  0x23, 0x3b, 0xf2, 0x1e, 0x93, 0xbf, 0x5a, 0xc1,
  0x8e, 0xf4, 0x8d, 0xbd, 0x24, 0x19, 0xd6, 0x49,
  0xbe, 0x90, 0xe0, 0xa5, 0x3c, 0xbc, 0x07, 0x49,
  0x66, 0x5a, 0x9e, 0xb5, 0x69, 0xa5, 0x09, 0x2c,
  0x20, 0x2b, 0x22, 0x18, 0xf9, 0x09, 0x88, 0x9b,
  0x58, 0x99, 0xdf, 0xcb, 0x05, 0xcd, 0x12, 0x6f,
  0x2b, 0x04, 0x04, 0xd1, 0xf0, 0x1f, 0xc1, 0x39,
  0xd8, 0x5d, 0x11, 0xd5, 0x4f, 0x9f, 0x0a, 0x4d,
  0xce, 0x19, 0x52, 0x4d, 0x74, 0x21, 0x7f, 0x46,
  0x5f, 0xc2, 0x53, 0x4b, 0x37, 0xfc, 0xc5, 0x18,
  0x91, 0xa8, 0xcb, 0x72, 0x7e, 0x14, 0x80, 0x68,
  0xf5, 0xdd, 0x80, 0x2c, 0xb6, 0x67, 0x0e, 0xf1,
  0xef, 0xc5, 0xa4, 0x51, 0xd7, 0xfd, 0xee, 0x6d,
  0x2f, 0x41, 0xda, 0xcc, 0x7d, 0xcd, 0x05, 0xba,
  0x78, 0x4d, 0x6c, 0x2f, 0x21, 0xe8, 0xc4, 0xc6,
  0xf1, 0x49, 0x98, 0xae, 0xe8, 0x2b, 0x61, 0xfb,
  0x49, 0xf4, 0xa3, 0x71, 0xd0, 0xdc, 0xd8, 0xcc,
  0x2f, 0xab, 0x04, 0x50, 0x62, 0x7b, 0x90, 0xa7,
  0x72, 0x9d, 0xc9, 0xe1, 0x91, 0xf8, 0x3e, 0x3f,
  0x73, 0x50, 0x8a, 0xcf, 0xdc, 0x1e, 0xdd, 0x38,
  0x52, 0xfd, 0x48, 0x9f, 0xa6, 0x4b, 0xbc, 0x3f,
  0xdc, 0x01, 0x61, 0xc5, 0x02, 0x4f, 0x55, 0xc1,
  0xb4, 0x0b, 0x4c, 0xd2, 0x9f, 0x6c, 0x18, 0x6a,
  0x72, 0xc4, 0x72, 0x17, 0x15, 0xce, 0x88, 0xd9,
  0x45, 0x1f, 0x9c, 0x0b, 0x80, 0xa7, 0x57, 0x2c,
  0xd6, 0x56, 0x5c, 0x52, 0x10, 0x8c, 0x1c, 0x62,
  0x84, 0x62, 0x5f, 0x58, 0xca, 0xe6, 0xa4, 0x35,
  0x82, 0x65, 0xd7, 0xa1, 0xdb, 0xac, 0xc8, 0xe7,
  0xb4, 0x71, 0xa7, 0x3f, 0xde, 0x77, 0x91, 0x35,
  0xe6, 0x1c, 0x29, 0x73, 0xf6, 0x38, 0x50, 0x31,
  0xc4, 0xbb, 0x50, 0xcb, 0x54, 0xd7, 0x8a, 0x71,
  0x1b, 0x35, 0xa3, 0x02, 0x5e, 0x37, 0xf9, 0x8c,
  0x11, 0xbe, 0x04, 0x8f, 0x94, 0x5c, 0x80, 0xbc,
  0x94, 0xc7, 0x79, 0xbc, 0x53, 0x55, 0x61, 0xf6,
  0xc3, 0xb1, 0x13, 0xa6, 0xa2, 0x94, 0xb2, 0x22,
  0x20, 0xb0, 0x67, 0xba, 0xa3, 0x3b, 0x45, 0xdc,
  0xf8, 0x4f, 0x84, 0xe7, 0x4d, 0xbe, 0xba, 0x2f,
  0x3d, 0x79, 0x47, 0x02, 0xd0, 0xb9, 0x7f, 0x6d,
  0x30, 0x3e, 0xb1, 0xce, 0x3b, 0xd7, 0x3c, 0x6d,
  0x37, 0xbd, 0x31, 0x86, 0xa0, 0x0c, 0x17, 0xa3,
  0xf0, 0x82, 0xec, 0x9c, 0xaa, 0x8b, 0x9f, 0xbc,
  0x58, 0x1d, 0x63, 0x61, 0xd1, 0x07, 0xfe, 0x43,
  0x00, 0xb0, 0x11, 0x65, 0xc2, 0xe7, 0x18, 0x06,
  0x63, 0xd0, 0xe4, 0x5d, 0x3f, 0x0c, 0xb1, 0x55,
  0xd6, 0x83, 0xa6, 0x1e, 0x4a, 0xa6, 0x3c, 0xc2,
  0x92, 0xcf, 0xe6, 0x96, 0x10, 0x32, 0x88, 0xcd,
  0x04, 0x3a, 0xec, 0x7d, 0xd4, 0xe0, 0x61, 0xe5,
  0xa0, 0x7f, 0x52, 0x28, 0xc5, 0xf3, 0x0b, 0xe3,
  0xe9, 0xec, 0xd6, 0x0b, 0xe6, 0x7f, 0xab, 0x80,
  0xa3, 0x21, 0x8a, 0x7a, 0x9c, 0x46, 0xed, 0x62,
  0x6a, 0x1c, 0xa2, 0xfa, 0x5d, 0xee, 0x76, 0x25,
  0xe4, 0x82, 0x84, 0x0b, 0x0d, 0x82, 0xd5, 0x37,
  0xb1, 0xb6, 0xe5, 0x3b, 0x45, 0x77, 0x60, 0x46,
  0x34, 0xee, 0x03, 0x42, 0x68, 0x44, 0xe8, 0x9b,
  0x68, 0xca, 0xb2, 0xb7, 0x60, 0x50, 0x68, 0x4f,
  0x9f, 0xcc, 0x1a, 0x6b, 0xf6, 0xa5, 0xe0, 0x29,
  0xf1, 0x32, 0x13, 0xd3, 0x69, 0x0a, 0x83, 0xf4,
  0x0f, 0xe3, 0xb6, 0x52, 0xa5, 0x54, 0x52, 0x43,
  0xe2, 0x51, 0x99, 0xd1, 0xdf, 0x09, 0x11, 0x33,
  0xc9, 0xa0, 0xa0, 0xba, 0x5b, 0x5a, 0x7a, 0xd5,
  0xea, 0xc1, 0x66, 0x94, 0xb8, 0xc6, 0xbc, 0x47,
  0x35, 0x1f, 0x39, 0x5d, 0x21, 0x84, 0xdb, 0x72,
  0x05, 0x59, 0x4d, 0x1b, 0x5f, 0x44, 0x29, 0x01,
  0x30, 0xaa, 0xfc, 0x0f, 0x42, 0xe6, 0x07, 0xaa,
  0x3a, 0xdb, 0xb1, 0xa2, 0xa7, 0xd7, 0x87, 0x94,
  0x34, 0x67, 0xef, 0xff, 0x07, 0x9d, 0x95, 0xfb,
  0xd9, 0x68, 0xf2, 0xbb, 0xe9, 0x6f, 0x3e, 0x5e,
  0x02, 0xce, 0x04, 0x2d, 0x63, 0xef, 0xaf, 0x3b,
  0xa4, 0xbb, 0x10, 0x63, 0x11, 0x4f, 0x87, 0xd4,
  0xce, 0xd0, 0x6b, 0x20, 0xb6, 0x03, 0xc9, 0x66,
  0x3a, 0xa6, 0x33, 0x5e, 0x33, 0x76, 0x81, 0x21,
  0x7a, 0xb9, 0xe4, 0xcd, 0xe8, 0x19, 0x58, 0xe3,
  0x89, 0xa3, 0x76, 0x48, 0x55, 0x9b, 0xbd, 0x92,
  0xdd, 0x29, 0x89, 0x68, 0xc8, 0x9c, 0x1c, 0xde,
  0xb3, 0x14, 0x1b, 0x2e, 0x25, 0xee, 0xe0, 0x92,
  0x50, 0x49, 0xb8, 0x49, 0xd7, 0x65, 0x76, 0xc1,
  0x1a, 0x1d, 0xb6, 0x1a, 0xe4, 0x09, 0xaf, 0xb4,
  0x19, 0xb2, 0xe8, 0x64, 0x89, 0xa5, 0x6c, 0xf5,
  0xc8, 0x61, 0xd5, 0x73, 0x4a, 0x2d, 0x56, 0xc4,
  0x36, 0xd9, 0xed, 0x71, 0xbc, 0x94, 0xe2, 0xbc,
  0xe4, 0xaa, 0xe7, 0x45, 0x3f, 0xae, 0x23, 0x1b,
  0x9e, 0x7e, 0x06, 0x12, 0xa4, 0x6b, 0x78, 0x20,
  0x98, 0xfc, 0x32, 0xda, 0x1e, 0x00, 0x84, 0xc4,
  0xcd, 0xe5, 0xb7, 0x8d, 0xfa, 0xd7, 0x00, 0x75,
  0xf2, 0xb2, 0x96, 0x31, 0xc7, 0x3a, 0xca, 0x70,
  0xa5, 0x64, 0xd0, 0x7f, 0x14, 0x3c, 0x33, 0xf4,
  0x43, 0x7b, 0x66, 0xf6, 0xa7, 0x1a, 0xb1, 0x51,
  0xb6, 0xa7, 0xab, 0x0f, 0x1d, 0x5b, 0x52, 0x04,
  0x65, 0xbe, 0x2c, 0xc7, 0x78, 0x76, 0x1b, 0x93,
  0xda, 0x14, 0xc1, 0xe7, 0xc1, 0xf2, 0xab, 0x3b,
  0xac, 0xd5, 0x40, 0x2c, 0xbe, 0x32, 0x30, 0xc8,
  0xe1, 0xae, 0xcc, 0x2e, 0x74, 0x41, 0x28, 0xa8,
  0xce, 0x75, 0x9d, 0xec, 0x32, 0x04, 0x11, 0x21,
  0xc4, 0xb4, 0x0b, 0x8a, 0xc6, 0xdf, 0x42, 0x7d,
  0xcd, 0x11, 0x50, 0xa3, 0x57, 0x9c, 0x5f, 0xcc,
  0x2d, 0x58, 0x64, 0xbf, 0xba, 0xcb, 0x81, 0xf0,
  0x5f, 0x77, 0xa1, 0x6e, 0xfc, 0x50, 0x44, 0x51,
  0x4b, 0x73, 0x05, 0x01, 0x2b, 0x87, 0x68, 0xb1,
  0xc8, 0x4c, 0xcc, 0x99, 0x28, 0x6a, 0x2a, 0x1a,
  0xe0, 0x40, 0x8d, 0x7d, 0x8d, 0x3e, 0xc2, 0x14,
  0x64, 0x12, 0x06, 0x75, 0x77, 0xee, 0x29, 0xac,
  0x17, 0xd4, 0x33, 0x70, 0xae, 0x14, 0xa8, 0x5a,
  0x03, 0x18, 0x4a, 0x32, 0xaf, 0x91, 0x02, 0x84,
  0xaa, 0x04, 0x7b, 0xdb, 0x3d, 0x82, 0xaf, 0x59,
  0xdb, 0x6d, 0x16, 0xb5, 0x47, 0xa8, 0x81, 0x75,
  0x7c, 0xd8, 0x76, 0x5d, 0x0e, 0x58, 0x61, 0xbe,
  0x82, 0x5b, 0x50, 0xc4, 0xb9, 0x93, 0xc2, 0x71,
  0xe8, 0xb6, 0x20, 0x1a, 0xa3, 0x9a, 0xb2, 0xec,
  0xe6, 0x25, 0x61, 0xb7, 0xed, 0x7d, 0x03, 0x95,
  0x79, 0x0e, 0x70, 0x93, 0x96, 0x0c, 0xcb, 0x1e,
  0x0c, 0x63, 0xc8, 0xfb, 0xe9, 0x33, 0x1e, 0x39,
  0xf6, 0x6f, 0xa8, 0xea, 0x11, 0xb0, 0x41, 0x90,
  0x89, 0x7c, 0x3f, 0x67, 0x0b, 0x0d, 0xd3, 0xff,
  0xbe, 0xf5, 0xef, 0x5c, 0x4b, 0xcc, 0x07, 0xc1,
  0xab, 0x96, 0x24, 0x7e, 0xc6, 0x0f, 0x56, 0x11,
  0x07, 0xd7, 0x8d, 0x09, 0xb1, 0x60, 0x6c, 0x0f,
  0xe0, 0x22, 0xb6, 0x65, 0x61, 0x7f, 0x9b, 0x6f,
  0xae, 0xc2, 0x41, 0x7a, 0x9f, 0xd7, 0x0b, 0xfd,
  0xa6, 0x6d, 0x6d, 0x3e, 0x2d, 0x9b, 0x1e, 0x13,
};

//////////////////////////////////////////////////////////////////////

bool PrepareServerHandshake(const byte* data, int cb,
                            const char** response) {
  const u_int32_t version =
      ((static_cast<u_int32_t>(data[4]) & 0xff) << 24) +
      ((static_cast<u_int32_t>(data[5]) & 0xff) << 16) +
      ((static_cast<u_int32_t>(data[6]) & 0xff) << 8) +
      (static_cast<u_int32_t>(data[7]) & 0xff);

  static const int kHandshakeDataSize = kHandshakeSize - kSha256DigestSize;

  byte* p = new byte[2 * kHandshakeSize];
  *response = reinterpret_cast<const char*>(p);

  // server part ..

  if ( IsV3Handshake(version) ) {
    memcpy(p, kServerV3HandshakeBlock, kHandshakeSize);
  } else {
    memcpy(p, kServerV1HandshakeBlock, kHandshakeSize);
  }

  // client part ..

  // Get what client asked us..
  const int client_key_pos = GetDigestPosition(data, cb, version);
  if ( client_key_pos < 0 ) {
    return false;
  }
  byte client_key[kSha256DigestSize];
  HmacSha256(kHandshakeServerKey, sizeof(kHandshakeServerKey),
             data + client_key_pos, kSha256DigestSize,
             client_key);

  // Prepare some pseudo-random data
  byte* crt = p + kHandshakeSize;
  for ( int i = 0; i < kSha256DigestSize; ++i ) {
    *crt++ = data[(37 * i) & 0xff];
  }
  byte prev = p[kHandshakeSize + kSha256DigestSize - 1];
  for ( int i = kSha256DigestSize; i < kHandshakeSize; ++i ) {
    *crt = (prev ^ data[i]);
    prev = *crt++;
  }
  HmacSha256(client_key, sizeof(client_key),
             p + kHandshakeSize, kHandshakeDataSize,
             p + kHandshakeSize + kHandshakeDataSize);

  return true;
}


#ifdef __cplusplus
}
#endif
