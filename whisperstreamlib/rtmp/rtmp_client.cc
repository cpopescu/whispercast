// Copyright (c) 2009, Whispersoft s.r.l.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Whispersoft s.r.l. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: Catalin Popescu & Cosmin Tudorache
//
#include <vector>
#include <whisperlib/common/base/log.h>
#include <whisperlib/common/base/errno.h>
#include <whisperlib/common/base/strutil.h>
#include <whisperlib/common/base/timer.h>

#include <whisperlib/net/base/selector.h>
#include <whisperlib/net/base/connection.h>
#include <whisperlib/net/url/url.h>
#include <whisperstreamlib/base/consts.h>
#include <whisperstreamlib/rtmp/rtmp_client.h>
#include <whisperstreamlib/rtmp/rtmp_coder.h>
#include <whisperstreamlib/rtmp/rtmp_util.h>
#include <whisperstreamlib/rtmp/events/rtmp_event.h>
#include <whisperstreamlib/rtmp/events/rtmp_event_invoke.h>
#include <whisperstreamlib/rtmp/events/rtmp_event_notify.h>
#include <whisperstreamlib/rtmp/events/rtmp_call.h>
#include <whisperstreamlib/rtmp/events/rtmp_event_ping.h>
#include <whisperstreamlib/rtmp/objects/rtmp_objects.h>
#include <whisperstreamlib/rtmp/objects/amf/amf_util.h>

#include <whisperstreamlib/flv/flv_tag.h>
#include <whisperstreamlib/flv/flv_file_writer.h>

#include <iomanip>

namespace rtmp {

//////////////////////////////////////////////////////////////////////
//
// Some static handshake data - definition
//
extern const uint8 kFirstHandshake[kHandshakeSize];
extern const uint8 kSecondHandshake[kHandshakeSize];

SimpleClient::SimpleClient(net::Selector* selector)
  : selector_(selector),
    net_connection_(new net::TcpConnection(selector,
                                           net::TcpConnectionParams())),
    coder_(&protocol_data_, 1 << 20),
    state_(StateHandshakeNotStarted),
    stream_id_(0),
    timeouter_(selector, NewPermanentCallback(
        this, &SimpleClient::TimeoutHandler)),
    tags_(),
    read_handler_(NULL),
    close_handler_(NULL),
    event_log_level_(0),
    tag_log_level_(0) {
  memset(channel_time_ms_, 0, sizeof(channel_time_ms_));
  net_connection_->SetReadHandler(NewPermanentCallback(
      this, &SimpleClient::ConnectionReadHandler), true);
  net_connection_->SetWriteHandler(NewPermanentCallback(
      this, &SimpleClient::ConnectionWriteHandler), true);
  net_connection_->SetConnectHandler(NewPermanentCallback(
      this, &SimpleClient::ConnectionConnectHandler), true);
  net_connection_->SetCloseHandler(NewPermanentCallback(
      this, &SimpleClient::ConnectionCloseHandler), true);
}

SimpleClient::~SimpleClient() {
  delete net_connection_;
  net_connection_ = NULL;

  delete read_handler_;
  read_handler_ = NULL;
  delete close_handler_;
  close_handler_ = NULL;
}

void SimpleClient::set_read_handler(ReadHandler* read_handler) {
  CHECK_NULL(read_handler_);
  CHECK(read_handler->is_permanent());
  read_handler_ = read_handler;
}

void SimpleClient::set_close_handler(CloseHandler* close_handler) {
  CHECK_NULL(close_handler_);
  CHECK(close_handler->is_permanent());
  close_handler_ = close_handler;
}

void SimpleClient::set_event_log_level(int32 event_log_level) {
  event_log_level_ = event_log_level;
}
void SimpleClient::set_tag_log_level(int32 tag_log_level) {
  tag_log_level_ = tag_log_level;
}

scoped_ref<streaming::FlvTag> SimpleClient::PopTag() {
  if ( tags_.empty() ) {
     return NULL;
  }
  scoped_ref<streaming::FlvTag> tag = tags_.front();
  tags_.pop_front();
  return tag;
}

bool SimpleClient::Open(const net::HostPort& remote_address,
                        const string& app_name, const string& stream_name) {
  CHECK_NOT_NULL(read_handler_);
  CHECK_NOT_NULL(close_handler_);
  CHECK(app_name_ == "");
  app_name_ = app_name;
  CHECK(stream_name_ == "");
  stream_name_ = stream_name;
  CHECK(tc_url_ == "");
  tc_url_ = string("rtmp://")+remote_address.ToString()+"/"+app_name_;
  if ( !net_connection_->Connect(remote_address) ) {
    LOG_ERROR << "Failed to connect to: " << remote_address.ToString();
    return false;
  }
  timeouter_.SetTimeout(kConnectEvent, kConnectTimeout);
  return true;
}

bool SimpleClient::Open(const string& str_url) {
  URL url(str_url);
  if ( url.scheme() != "rtmp" ) {
    LOG_ERROR << "Invalid url must be a \"rtmp://..\" url";
    return false;
  }

  net::HostPort addr = net::HostPort(url.host(),
      url.IntPort() > 0 ? (uint16)url.IntPort() : 1935);

  string path = url.path().substr(1);
  if (!url.query().empty()) {
    path = path + "?" + url.query();
  }

  std::pair<string, string> parsed = strutil::SplitFirst(path, "/");
  if ( parsed.second == "" ) {
    LOG_ERROR << "Invalid url: [" << str_url << "], empty stream";
    return false;
  }
  return Open(addr, parsed.first, parsed.second);
}

void SimpleClient::Close() {
  net_connection_->FlushAndClose();
}

void SimpleClient::Seek(int64 position_ms) {
  CHECK_EQ(state_, StatePlaySent);
  scoped_ref<EventInvoke> e = new EventInvoke(&protocol_data_, 8, stream_id_);
  e->set_call(new rtmp::PendingCall());
  e->set_invoke_id(0);
  e->mutable_call()->set_method_name("seek");
  e->mutable_call()->AddArgument(new CNumber(position_ms));
  Send(e.get());
}

void SimpleClient::Pause(bool pause) {
  CHECK_EQ(state_, StatePlaySent);
  scoped_ref<EventInvoke> e = new EventInvoke(&protocol_data_, 8, stream_id_);
  e->mutable_header()->set_timestamp_ms(channel_time_ms_[8] + 100);
  e->set_call(new rtmp::PendingCall());
  e->set_invoke_id(0);
  e->mutable_call()->set_method_name("pause");
  e->mutable_call()->AddArgument(new CBoolean(pause));
  e->mutable_call()->AddArgument(new CNumber(channel_time_ms_[8] + 100));
  Send(e.get());
}

void SimpleClient::TimeoutHandler(int64 timeout_id) {
  LOG_ERROR << "Timeout timeout_id: " << timeout_id << " ("
            << TimeoutIdName(timeout_id) << ") , closing connection...";
  net_connection_->FlushAndClose();
}

void SimpleClient::ConnectionConnectHandler() {
  LOG_DEBUG << "CONNECTED !";
  timeouter_.UnsetTimeout(kConnectEvent);

  // send handshake
  io::NumStreamer::WriteByte(net_connection_->outbuf(), kHandshakeLeadByte);
  // uptime
  int32 uptime = timer::TicksMsec();
  io::NumStreamer::WriteInt32(
      net_connection_->outbuf(), uptime, common::BIGENDIAN);
  // version
  io::NumStreamer::WriteInt32(
      net_connection_->outbuf(), 0, common::BIGENDIAN);
  // just some random junk, sort of
  net_connection_->outbuf()->
      Write(kServerV1HandshakeBlock, sizeof(kServerV1HandshakeBlock)-8);

  // And we should get some data from the server back
  timeouter_.SetTimeout(kReadEvent, kReadTimeout);
}

bool SimpleClient::ConnectionReadHandler() {
  timeouter_.SetTimeout(kReadEvent, kReadTimeout);

  if ( state_ == StateHandshakeNotStarted ) {
    // wait for complete handshake return
    if ( net_connection_->inbuf()->Size() < kHandshakeSize + 1 ) {
      return true;
    }

    io::NumStreamer::ReadByte(net_connection_->inbuf());
    // send handshake (step 2)
    net_connection_->outbuf()->
        AppendStream(net_connection_->inbuf(), kHandshakeSize);
    state_ = StateHandshaking;
  }
  if ( state_ == StateHandshaking ) {
    // wait for complete handshake return
    if ( net_connection_->inbuf()->Size() < kHandshakeSize ) {
      return true;
    }
    net_connection_->inbuf()->Skip(2 * kHandshakeSize );
    state_ = StateHandshakeDone;
  }
  if ( state_ == StateHandshakeDone ) {
    string tcUrl;

    CStringMap* params = new CStringMap;
    params->Set("fpad", new CBoolean(false));
    params->Set("app", new CString(app_name_.c_str()));
    params->Set("tcUrl", new CString(tc_url_.c_str()));
    params->Set("flashVer", new CString("LNX 10,3,181,36"));
    params->Set("capabilities", new CNumber(15));
    params->Set("audioCodecs", new CNumber(3191));
    params->Set("videoCodecs", new CNumber(252));
    params->Set("videoFunction", new CNumber(1));

    scoped_ref<EventInvoke> connect = new EventInvoke(&protocol_data_, 3, 0);
    connect->set_call(new rtmp::PendingCall("", "connect", 1,
        Call::CALL_STATUS_PENDING, params, NULL));

    Send(connect.get());
    state_ = StateConnectSent;
  }

  while ( true ) {
    scoped_ref<rtmp::Event> event;
    AmfUtil::ReadStatus err = coder_.Decode(net_connection_->inbuf(),
                                            AmfUtil::AMF0_VERSION, &event);
    if ( err == AmfUtil::READ_NO_DATA ) {
      break;
    }
    if ( err != AmfUtil::READ_OK ) {
      LOG_ERROR << " Wrong data received from server !!"
                << " err: " << AmfUtil::ReadStatusName(err);
      break;
    }
    CHECK_NOT_NULL(event.get());

    uint32 channel = event->header()->channel_id();
    CHECK_LT(channel, 10);

    if ( event->header()->is_timestamp_relative() ) {
      channel_time_ms_[channel] += event->header()->timestamp_ms();
    } else {
      channel_time_ms_[channel] = event->header()->timestamp_ms();
    }

    if (event_log_level_) {
      VLOG(event_log_level_)
          << "@"
          << std::setw(8) << channel_time_ms_[channel] << std::setw(0) << "): "
          << event->ToString();
    }
    vector< scoped_ref<streaming::FlvTag> > tags;
    ExtractFlvTags(*event.get(), channel_time_ms_[channel], &tags);
    for ( uint32 i = 0; i < tags.size(); i++ ) {
      if (tag_log_level_) {
        VLOG(tag_log_level_) << tags[i]->ToString();
      }
      tags_.push_back(tags[i]);
    }

    if ( event->event_type() == rtmp::EVENT_INVOKE ) {
      if ( state_ == StateConnectSent )  {
        scoped_ref<EventServerBW> serverBW = new EventServerBW(2500000,
            &protocol_data_, kChannelPing, 0);
        Send(serverBW.get());
        scoped_ref<EventPing> clientBuffer = new EventPing(
            rtmp::EventPing::CLIENT_BUFFER, 0, 300,
            &protocol_data_, kChannelPing, 0);
        Send(clientBuffer.get());

        scoped_ref<EventInvoke> createStream = new EventInvoke(
            &protocol_data_, 3, 0);
        createStream->set_call(new rtmp::PendingCall());
        createStream->set_invoke_id(2);
        createStream->mutable_call()->set_method_name("createStream");
        Send(createStream.get());

        state_ = StateCreateStreamSent;
        continue;
      }
      if ( state_ == StateCreateStreamSent ) {
        EventInvoke* invoke = static_cast<EventInvoke *>(event.get());
        if ( invoke->invoke_id() != 2 ) {
          LOG_DEBUG << "Skipping - waiting for createStream answer";
          continue;
        }
        if ( !invoke->call()->arguments().empty() &&
             invoke->call()->arguments()[0]->object_type() ==
             CObject::CORE_NUMBER ) {
          const CNumber* id = static_cast<const CNumber*>(
            invoke->call()->arguments()[0]);
          stream_id_ = int(id->value());
          LOG_DEBUG << "Setting stream id to: " << stream_id_;
        }
        scoped_ref<EventInvoke> play = new EventInvoke(
            &protocol_data_, 8, stream_id_);
        play->set_call(new rtmp::PendingCall("", "play", 0,
            Call::CALL_STATUS_PENDING, NULL, NULL));
        play->mutable_call()->AddArgument(new CString(stream_name_));
        play->mutable_call()->AddArgument(new CNumber(-2.0));

        LOG_DEBUG << "Sending play: " << play->ToString();
        Send(play.get());

        state_ = StatePlaySent;
        continue;
      }
    }

    if ( event->event_type() == rtmp::EVENT_CHUNK_SIZE ) {
      EventChunkSize* const ecs = static_cast<EventChunkSize*>(event.get());
      protocol_data_.set_read_chunk_size(ecs->chunk_size());
    }
  }

  if ( !tags_.empty() ) {
    read_handler_->Run();
  }
  return true;
}

bool SimpleClient::ConnectionWriteHandler() {
  return true;
}

void SimpleClient::ConnectionCloseHandler(int err,
    net::NetConnection::CloseWhat what) {
  LOG_DEBUG << "ConnectionCloseHandler : "
           << net::NetConnection::CloseWhatName(what);
  if ( what != net::NetConnection::CLOSE_READ_WRITE ) {
    net_connection_->FlushAndClose();
    return;
  }
  close_handler_->Run();
}

void SimpleClient::Send(Event* event) {
  LOG_DEBUG << "Sending: " << event->ToString();
  coder_.Encode(net_connection_->outbuf(), AmfUtil::AMF0_VERSION, event);
  // And we should get some data from the server back
  timeouter_.SetTimeout(kReadEvent, kReadTimeout);
  // because we wrote the event directly in the tcp output buffer
  net_connection_->RequestWriteEvents(true);
}

//////////////////////////////////////////////////////////////////////
//
// Long static data..
//
const uint8 kFirstHandshake[kHandshakeSize] = {
  0x14,   0xf0,   0xd1,   0xbc,   0x03,   0x00,   0x01,   0x01,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00
};

const uint8 kSecondHandshake[kHandshakeSize] = {
  0x2a,   0x9d,   0x47,   0x03,   0x6d,   0x54,   0x9c,   0xb1,
  0xfe,   0x39,   0x09,   0x69,   0xe6,   0x4c,   0xf1,   0xaf,
  0xb6,   0x2f,   0x0d,   0x05,   0x4a,   0x96,   0x5a,   0x26,
  0x62,   0xc0,   0x03,   0x1a,   0x62,   0x95,   0x10,   0xc7,
  0xf7,   0x95,   0x94,   0x63,   0x77,   0x2c,   0x2a,   0x49,
  0x05,   0x74,   0x3e,   0x8a,   0x02,   0xc8,   0x8c,   0x7f,
  0x93,   0x8d,   0x1d,   0x05,   0xf2,   0x82,   0x13,   0xb4,
  0xc9,   0xb0,   0x1a,   0x22,   0xf1,   0x93,   0x94,   0x78,
  0x8c,   0x88,   0x3d,   0x3f,   0x4d,   0x1b,   0xfe,   0xa5,
  0xbf,   0x65,   0xf7,   0xcf,   0x84,   0xe2,   0xe9,   0x8e,
  0x27,   0xe1,   0x96,   0x06,   0xab,   0xf5,   0x69,   0x0a,
  0xd3,   0x26,   0xe5,   0x47,   0x23,   0xd8,   0x77,   0xb7,
  0x8f,   0xf2,   0xfc,   0x0f,   0x0e,   0x6a,   0x28,   0x64,
  0xc0,   0x0c,   0x54,   0xd1,   0x4f,   0x38,   0x77,   0x65,
  0xf8,   0xb6,   0xf8,   0x64,   0x9e,   0x8d,   0x3b,   0x4b,
  0x6e,   0xbc,   0xd7,   0x9f,   0x66,   0x0f,   0x32,   0xae,
  0x3c,   0xa5,   0x92,   0x32,   0x25,   0x3e,   0x46,   0x1d,
  0x78,   0x00,   0x26,   0x21,   0x80,   0xe1,   0x24,   0xfe,
  0xf7,   0x0f,   0x44,   0xc6,   0xc5,   0xa2,   0x7a,   0x3c,
  0x9d,   0xe5,   0x1f,   0x20,   0xb6,   0x73,   0x30,   0x9f,
  0x69,   0xa2,   0x2d,   0x0d,   0x79,   0x1f,   0xd1,   0x58,
  0x3e,   0xdd,   0x25,   0x12,   0x43,   0x33,   0xbe,   0xbc,
  0x92,   0xa1,   0x57,   0xb6,   0xe8,   0x46,   0x5f,   0x07,
  0x8a,   0x40,   0x66,   0x4b,   0x52,   0x7d,   0xaf,   0x9c,
  0x8a,   0xd5,   0xf7,   0x1f,   0xa7,   0xd3,   0x4f,   0xa5,
  0xb3,   0xec,   0x6c,   0xde,   0xa2,   0x7f,   0x16,   0xd4,
  0x91,   0x69,   0xa8,   0x4c,   0x25,   0xcc,   0x1b,   0xcd,
  0x1a,   0xc4,   0xc0,   0x10,   0x91,   0x85,   0x6d,   0xac,
  0xdc,   0x86,   0x93,   0x57,   0xfc,   0x75,   0x99,   0x9d,
  0x30,   0xa9,   0x3e,   0x9e,   0xef,   0xa4,   0x54,   0x92,
  0x0a,   0x83,   0x28,   0x95,   0x91,   0xb4,   0x81,   0xf6,
  0x15,   0xca,   0x07,   0x54,   0x16,   0xaf,   0x8c,   0xa2,
  0x64,   0x70,   0x53,   0x7f,   0x44,   0x81,   0xb7,   0x54,
  0x8f,   0x21,   0x27,   0x67,   0x5a,   0xa6,   0x7b,   0x1c,
  0x25,   0xf0,   0x2e,   0x53,   0x8f,   0x39,   0x2b,   0x95,
  0x2b,   0x7f,   0x9c,   0xb4,   0x1f,   0x4d,   0x94,   0xa1,
  0x26,   0x26,   0xd1,   0x78,   0xf2,   0xef,   0x7f,   0x13,
  0xe8,   0x0c,   0xe2,   0xf1,   0x8c,   0x44,   0x11,   0xc8,
  0x49,   0x96,   0xeb,   0x6b,   0x2c,   0x54,   0x15,   0x8d,
  0xed,   0x7d,   0xe0,   0xde,   0x79,   0x99,   0x71,   0xc0,
  0xb4,   0xec,   0xac,   0x8a,   0xc2,   0x18,   0xa2,   0x48,
  0x01,   0xee,   0x8e,   0xef,   0xf7,   0x1b,   0xf0,   0x48,
  0x2d,   0x6c,   0xc9,   0xff,   0xf8,   0xf7,   0x16,   0x43,
  0x85,   0xc8,   0x10,   0xfb,   0xab,   0x82,   0x23,   0x26,
  0x2b,   0x13,   0x13,   0x13,   0xac,   0x06,   0x5c,   0x30,
  0x6f,   0xc9,   0x18,   0xef,   0xcb,   0x82,   0xfe,   0x9d,
  0xf3,   0x76,   0x3d,   0xbb,   0x0a,   0xdf,   0x81,   0x5a,
  0xae,   0x1a,   0xe2,   0xe9,   0x74,   0x1b,   0x76,   0xaf,
  0x35,   0x8f,   0x3c,   0xef,   0x8d,   0xe6,   0x46,   0xa6,
  0xd4,   0x44,   0x0c,   0xc3,   0x51,   0x54,   0x20,   0x30,
  0x96,   0x50,   0xd3,   0x74,   0x78,   0x36,   0x2d,   0xe6,
  0xbf,   0x2e,   0xd5,   0x8e,   0xf1,   0xfc,   0x77,   0x2c,
  0xfd,   0x89,   0x09,   0x7e,   0xa7,   0x1f,   0x13,   0xaa,
  0xe7,   0x64,   0xe6,   0xd9,   0xe5,   0xa3,   0x36,   0x01,
  0x63,   0x42,   0x57,   0x22,   0x7c,   0x9e,   0xbc,   0x0a,
  0x17,   0xda,   0xec,   0x74,   0x37,   0x13,   0xe4,   0x72,
  0x32,   0x54,   0xba,   0x3c,   0x2c,   0xf1,   0x95,   0xc4,
  0x23,   0xd4,   0x5f,   0xff,   0xba,   0xe1,   0x87,   0xe5,
  0x25,   0x0d,   0xa8,   0x90,   0x93,   0x45,   0x0c,   0x5d,
  0xda,   0x0d,   0x8f,   0x17,   0x56,   0x56,   0x8d,   0x90,
  0xd4,   0x92,   0x87,   0x00,   0xec,   0xdc,   0x94,   0xc4,
  0xbc,   0x58,   0xbd,   0xcc,   0x19,   0x46,   0x9b,   0x89,
  0x35,   0xb3,   0xf0,   0x54,   0xae,   0x19,   0x88,   0x10,
  0x31,   0x8a,   0xe2,   0x5b,   0x10,   0x36,   0x5f,   0x67,
  0xa9,   0xf7,   0x48,   0x70,   0xcb,   0x3e,   0x43,   0xbb,
  0xec,   0xc2,   0x49,   0x68,   0xd7,   0x0b,   0x21,   0x06,
  0xb8,   0xb9,   0x6d,   0xa7,   0x49,   0x21,   0xfd,   0x7a,
  0x05,   0x83,   0xc4,   0x43,   0xee,   0x4d,   0x29,   0xe8,
  0x5b,   0x95,   0x16,   0x67,   0x4f,   0x87,   0xea,   0x1b,
  0xd2,   0x01,   0xdd,   0xce,   0xdc,   0xf3,   0x3f,   0x74,
  0xdc,   0x85,   0x01,   0xca,   0x43,   0x04,   0xe2,   0xb8,
  0x86,   0x18,   0xdd,   0xbc,   0x9f,   0x3b,   0x41,   0x65,
  0xa5,   0xf5,   0x63,   0x7d,   0x70,   0x9f,   0x4b,   0xb2,
  0x83,   0x08,   0xa2,   0x6f,   0xf4,   0x59,   0xbd,   0x46,
  0x4e,   0xa1,   0x22,   0x5f,   0xd4,   0x21,   0x49,   0xa7,
  0x6f,   0xcf,   0x2a,   0x43,   0x25,   0x13,   0x4f,   0xdd,
  0x97,   0xc4,   0x59,   0xb4,   0x8c,   0x37,   0x59,   0x36,
  0xd7,   0x78,   0xcd,   0xae,   0xa5,   0xf8,   0x9d,   0x1f,
  0x2b,   0x4b,   0x12,   0xe5,   0x6f,   0x78,   0xd4,   0x6a,
  0x94,   0xa6,   0x7c,   0xf0,   0x2e,   0x5f,   0x26,   0x8b,
  0xe4,   0xb9,   0xb8,   0x95,   0xde,   0x4e,   0x47,   0xcd,
  0xd2,   0x9e,   0x14,   0xd0,   0x17,   0x29,   0x5e,   0x1e,
  0x7f,   0x03,   0xed,   0x48,   0x88,   0x7a,   0xf7,   0xe7,
  0x00,   0xac,   0x02,   0x80,   0xf9,   0x53,   0x4f,   0x05,
  0x36,   0xa5,   0xb8,   0x0a,   0x0f,   0x97,   0x7d,   0x88,
  0x1f,   0xa6,   0x4b,   0x61,   0xf0,   0x78,   0xbc,   0xdb,
  0xd3,   0x90,   0x26,   0x6b,   0x01,   0x20,   0x0f,   0xa9,
  0x38,   0x31,   0x0a,   0xc9,   0xb8,   0x07,   0x32,   0x7f,
  0x6c,   0x83,   0xa2,   0x69,   0xa0,   0x30,   0xac,   0x04,
  0xb4,   0x80,   0xee,   0x0f,   0xec,   0x96,   0xa6,   0xdb,
  0xae,   0x37,   0x9f,   0xa0,   0x93,   0x1e,   0x23,   0xbb,
  0xb7,   0x19,   0x90,   0x19,   0xb2,   0xa5,   0x94,   0xc5,
  0xf4,   0x4e,   0xa4,   0x2d,   0x8c,   0xc7,   0x2c,   0x78,
  0x30,   0x00,   0x7e,   0xe1,   0x9b,   0xe4,   0x48,   0xae,
  0x80,   0xad,   0xe5,   0xca,   0x54,   0xf0,   0x73,   0xe9,
  0xae,   0x11,   0x87,   0x96,   0x46,   0x97,   0x04,   0xc0,
  0xde,   0x77,   0xd7,   0x6c,   0x8d,   0x18,   0x1a,   0x8f,
  0x17,   0x3d,   0xbb,   0x94,   0x08,   0x25,   0x1e,   0x49,
  0x75,   0x10,   0xe3,   0x81,   0xa4,   0x23,   0x7a,   0x81,
  0xa6,   0xd3,   0xc0,   0x5f,   0xc1,   0xfb,   0xca,   0xc4,
  0x32,   0x4b,   0x85,   0x04,   0xc3,   0x31,   0x66,   0x1a,
  0xc2,   0xbd,   0x56,   0x55,   0x58,   0xed,   0xdb,   0x68,
  0x98,   0x97,   0x97,   0x3f,   0x1c,   0xa0,   0x18,   0xa0,
  0xc0,   0xa9,   0x42,   0xf8,   0x61,   0xe3,   0x3e,   0x03,
  0x68,   0x1b,   0x10,   0xbb,   0x9e,   0xbd,   0xd8,   0x4a,
  0xb6,   0xf6,   0xec,   0x85,   0x8e,   0x2c,   0x42,   0x9b,
  0x31,   0x8d,   0xfe,   0x53,   0x40,   0x61,   0xed,   0x36,
  0x2d,   0x24,   0x6e,   0xd6,   0x30,   0x42,   0x03,   0xec,
  0x87,   0xea,   0xe9,   0x19,   0x0b,   0xe7,   0x5a,   0x69,
  0x63,   0xa6,   0x04,   0x60,   0x02,   0xaf,   0xcd,   0x49,
  0x03,   0x2f,   0x3c,   0xc8,   0x41,   0xfa,   0x69,   0xf1,
  0xdd,   0xaf,   0xfa,   0x6e,   0x68,   0xdb,   0x2b,   0xfa,
  0xa8,   0x1e,   0x81,   0xd2,   0x4e,   0xeb,   0x6b,   0xe0,
  0x30,   0xe5,   0xea,   0x49,   0x11,   0xbf,   0xe5,   0x37,
  0x54,   0x4a,   0x7c,   0x7e,   0xb9,   0xf5,   0x90,   0x81,
  0x09,   0x1a,   0x10,   0x3c,   0x1a,   0xcc,   0x6c,   0x59,
  0x46,   0xb4,   0xd9,   0xad,   0x11,   0xf0,   0xaa,   0x6b,
  0xb7,   0x39,   0x84,   0xdf,   0x80,   0x62,   0xca,   0x1b,
  0x18,   0x03,   0x43,   0xfd,   0x4e,   0x16,   0x21,   0x5b,
  0xbc,   0xa3,   0x2e,   0x18,   0x78,   0xc8,   0x5d,   0xe2,
  0x92,   0x45,   0x1f,   0xdb,   0x76,   0x4b,   0xf3,   0xba,
  0xff,   0x46,   0x4e,   0x07,   0xce,   0x2a,   0xdc,   0x82,
  0xb7,   0x8b,   0x36,   0x4e,   0xc5,   0xa4,   0xd0,   0x6f,
  0x90,   0x52,   0xa8,   0xb6,   0xfe,   0xda,   0x7b,   0x56,
  0x03,   0xae,   0xb5,   0x0e,   0x12,   0xf9,   0x5d,   0xf6,
  0x42,   0xa8,   0x21,   0x06,   0xe3,   0x0b,   0x4f,   0x18,
  0xa3,   0xea,   0x2c,   0x5e,   0x43,   0x44,   0x34,   0x56,
  0x94,   0xf2,   0x24,   0x55,   0x09,   0x7f,   0xcb,   0x9e,
  0xb2,   0xa8,   0xc0,   0xf0,   0x75,   0xb5,   0xf6,   0xfc,
  0x65,   0xf0,   0x0a,   0xa5,   0xca,   0xae,   0x76,   0xb7,
  0xca,   0x69,   0x72,   0xe1,   0xfb,   0xdd,   0x82,   0x9d,
  0x5f,   0xf8,   0x4f,   0x0c,   0xac,   0x43,   0xd3,   0x70,
  0xd5,   0xf1,   0x5f,   0xa1,   0xc3,   0x69,   0xf2,   0x6b,
  0x46,   0xa8,   0xbf,   0x83,   0x71,   0x07,   0x41,   0x54,
  0x26,   0xc1,   0xbd,   0x9d,   0xe5,   0x50,   0x0d,   0x8f,
  0xe8,   0x61,   0x63,   0xf0,   0x90,   0x8b,   0xd4,   0xb9,
  0x67,   0xf3,   0xd8,   0xb9,   0x39,   0xde,   0x75,   0x66,
  0xd3,   0x0f,   0xde,   0xba,   0x28,   0xa1,   0xf7,   0x69,
  0x81,   0xe5,   0x49,   0x81,   0x55,   0x47,   0x97,   0xb8,
  0x19,   0xc8,   0x0d,   0x0a,   0xb9,   0x1f,   0x18,   0x62,
  0xe5,   0xea,   0xb3,   0x2d,   0xf8,   0xad,   0xc7,   0x3e,
  0x50,   0xb5,   0x78,   0x6f,   0x8b,   0xe7,   0x12,   0x11,
  0x55,   0xf4,   0x50,   0x5c,   0xd6,   0xa5,   0x02,   0xc4,
  0x99,   0x62,   0x0a,   0x1a,   0x41,   0xd8,   0x64,   0xc1,
  0xfe,   0x47,   0x87,   0x5c,   0x6c,   0xd2,   0xc1,   0x3c,
  0x1f,   0x59,   0x73,   0x93,   0x3c,   0xca,   0x75,   0x17,
  0xe5,   0xc0,   0xba,   0x27,   0x0a,   0x7f,   0x45,   0x66,
  0x40,   0x26,   0x6d,   0x1d,   0xe5,   0x85,   0xb0,   0x37,
  0x47,   0x52,   0xdb,   0x47,   0xd1,   0x26,   0x0e,   0xdc,
  0x30,   0x24,   0x8b,   0x68,   0x4c,   0x63,   0xf6,   0xd0,
  0x23,   0x48,   0x6c,   0xb0,   0x73,   0x62,   0xe4,   0x95,
  0x53,   0x34,   0xa9,   0x47,   0x46,   0x66,   0x97,   0x1d,
  0xe1,   0xd2,   0x9f,   0xe6,   0x9c,   0x24,   0xfa,   0x85,
  0xb3,   0x99,   0x7f,   0x7e,   0xb0,   0xb3,   0x7d,   0xe7,
  0x8f,   0xdd,   0x45,   0x7e,   0x4a,   0x15,   0x77,   0xf3,
  0x31,   0x29,   0x5d,   0x26,   0xd5,   0x8f,   0xb5,   0x01,
  0x97,   0xc6,   0x6c,   0x32,   0x27,   0xcf,   0x66,   0xaf,
  0xe7,   0xd9,   0xc3,   0xde,   0xeb,   0xc4,   0x3a,   0xb7,
  0x24,   0x2a,   0xbc,   0x58,   0x93,   0x10,   0x6f,   0xc6,
  0xe0,   0xb7,   0xe9,   0xdc,   0xe7,   0x56,   0x61,   0xe5,
  0x7e,   0x11,   0x0f,   0xb5,   0xdf,   0x3b,   0xa2,   0xed,
  0xfe,   0x31,   0xb5,   0x8e,   0x00,   0x04,   0x1a,   0x50,
  0xe5,   0x97,   0x4d,   0x4f,   0x18,   0x2e,   0x1c,   0x10,
  0xdd,   0x66,   0x78,   0xcb,   0x13,   0x3b,   0x4f,   0x1b,
  0x24,   0x36,   0x84,   0x8c,   0xb8,   0x9b,   0x98,   0xe4,
  0x3a,   0x7b,   0x96,   0x8f,   0x9f,   0x12,   0xf1,   0x68,
  0x48,   0x0b,   0x49,   0x0a,   0xf6,   0x0b,   0x9d,   0xff,
  0xe2,   0xe7,   0xd8,   0x72,   0xdf,   0xb4,   0x04,   0x88,
  0x9e,   0x26,   0xdf,   0xd2,   0x16,   0x11,   0x42,   0x95,
  0xa9,   0xaa,   0x44,   0xf9,   0x3c,   0xdf,   0xf3,   0xc3,
  0xa9,   0x75,   0xc7,   0x56,   0xf7,   0xc1,   0x89,   0xfc,
  0x24,   0xe4,   0x43,   0xd1,   0xc2,   0x36,   0x4a,   0xf9,
  0x41,   0x1d,   0x92,   0x5c,   0x98,   0x0b,   0x13,   0x4d,
  0x15,   0x6e,   0x74,   0x36,   0x3c,   0xbe,   0xce,   0x08,
  0xe8,   0xae,   0xc3,   0xf0,   0xc5,   0xcc,   0xcf,   0x7e,
  0xac,   0x42,   0xf1,   0x97,   0x99,   0xfa,   0xfb,   0xe8,
  0x08,   0x70,   0x5c,   0x3d,   0x50,   0x50,   0x8a,   0x85,
  0x25,   0xab,   0x4b,   0xe0,   0x70,   0x37,   0x83,   0xbc,
  0x69,   0x22,   0x12,   0x84,   0x07,   0x96,   0x9b,   0xe4,
  0x42,   0xe6,   0xee,   0x15,   0x59,   0x1e,   0x23,   0x1c,
  0x79,   0xb6,   0xf1,   0x15,   0xb5,   0xe9,   0x74,   0xed,
  0xd1,   0xf6,   0xf1,   0xdc,   0xe9,   0x89,   0xe0,   0x33,
  0x8c,   0x16,   0x00,   0x11,   0xc1,   0x88,   0x95,   0xdf,
  0x58,   0xec,   0x27,   0x79,   0xc5,   0x54,   0xbf,   0xbc,
  0x15,   0xe4,   0x3d,   0x52,   0x26,   0xd3,   0xe0,   0x62,
  0x7a,   0xdb,   0x63,   0x1c,   0xf4,   0x70,   0x31,   0xe8,
  0x72,   0x78,   0x05,   0xca,   0x7f,   0x43,   0xb8,   0xc6,
  0x14,   0x2e,   0x12,   0xe7,   0xda,   0x1a,   0x1d,   0x67,
  0x57,   0x22,   0x4a,   0xe6,   0x82,   0xe0,   0x03,   0xff,
  0x51,   0xe0,   0x83,   0xbd,   0x98,   0x4c,   0x86,   0x6b,
  0x96,   0x70,   0x27,   0x27,   0xce,   0x36,   0x14,   0xaf,
  0x59,   0x9a,   0x08,   0x2b,   0x98,   0xbf,   0xe7,   0xfc,
};

}
