// Copyright (c) 2009, Whispersoft s.r.l.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Whispersoft s.r.l. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

/* abc * **  ***/
/** bca * ** *
*/

Type EmptyType {
}

Type Villager {
  required bigint ID_;

  required string name_;
  optional float  height_;
  //required string birthday_;

  optional bigint parentID_;
  optional array<bigint> childrenIDs_;
}

Type Tribe {
  string name_; // default is "required"

  optional bigint head_id_;
  required map<bigint,Villager> people_;
}

Type World {
  map<string, Tribe> tribes_;
}

Service Global {
  EmptyType MirrorEmptyType(EmptyType e);

  // returns the tribe in World having position [x,y]
  Tribe GetTribeByPosition(int x, int y);

  // Adds a new tribe in the World. If the specified position is already taken,
  // or the tribe name is already in use, then the World is not changed
  // and the function returns false.
  // On success returns true.
  bool  AddTribe(Tribe , int x, int y);

  /**
   * Create a tribe with the given name & people, and position it at
   * coordonates [x,y].
   * Returns:
   *  - on success: the newly created Tribe
   *  - on failure: a dummy empty tribe. This can happen if the tribename or
   *                the position are already taken.
   */
  Tribe CreateTribe(string tribename, array<Villager> people, int x, int y);

  // Sets the headid of an existing tribe. The headid must identify a person
  // in that tribe.
  // Returns:
  //  - on success: previous head id, or 0 if the head id was not set.
  //  - on failure: (-1) if there is no such tribename or headid.
  bigint SetTribeHead(string tribename, bigint headid);

  /**
   * Returns:
   *  - the person with the identifier "id" in the tribe identified by "tribename".
   *  - a dummy empty Villager, if there is no such "tribename" or no such "id".
   */
  Villager GetTribeVillager(string tribename, bigint id);

  /**
   * Clear all world tribes
   */
  void Clear();

//comentariul2

/* prepelita

// blabla

*/
//-*/
//***/

// comentariul3
}


/*
 *
 */
