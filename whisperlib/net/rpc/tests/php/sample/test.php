<?php

// we need directory "base" to contain the "rpc through php" base files
// usually located in ".../net/rpc/php"
include_once "base/rpc_base.php";

// files generated by rpc_parser
include_once "auto/types.php";
include_once "auto/wrappers.php";

InitializeLog(LOG_LEVEL_INFO);

$url = "http://localhost:8123/rpc";
$rpc_connection = new RpcHttpConnection($url);

// This function only purpose is to test float ~equality.
function MyEqual($a, $b) {
  if ( is_float($a) && is_float($b) ) {
    return abs($a - $b) < 0.00001;
  }
  if ( is_scalar($a) || is_null($a) || 
       is_scalar($b) || is_null($b) ) {
    return $a == $b; 
  }
  $a_keys = array();
  foreach($a as $k => $v) {
    array_push($a_keys, $k);
  }
  $b_keys = array();
  foreach($b as $k => $v) {
    array_push($b_keys, $k);
  }
  if ( count($a_keys) != count($b_keys) ) {
    return false;
  }
  for($i = 0; $i < count($a_keys); $i++){
    $ak = $a_keys[$i];
    $bk = $b_keys[$i];
    if ( !MyEqual($ak, $bk) ) {
      return false;
    }
    $av = $a->$ak;
    $bv = $b->$bk;
    if ( !MyEqual($av, $bv) ) {
      return false;
    }
  }
  return true;
}

function TEST_SUCCESS($call_description, $expected_result, $call_status, $file, $line) {
  if ( !$call_status->success_ ) {
    LOG_ERROR("$file:$line FAIL $call_description => RPC failed, error: $call_status->error_");
    exit();
    return;
  }
  $result_type = is_object($call_status->result_) ? get_class($call_status->result_) : gettype($call_status->result_);
  $expected_type = is_object($expected_result) ? get_class($expected_result) : gettype($expected_result);
  if ( $result_type !== $expected_type ) {
    LOG_ERROR("$file:$line FAIL $call_description => returned type: $result_type , differs from expected type: $expected_type");
    exit();
    return;
  }
  if ( !MyEqual($call_status->result_, $expected_result ) ) {
    LOG_ERROR("$file:$line FAIL $call_description => $call_status->result_ , differs from expected result: $expected_result");
    exit();
    return;
  }
  LOG_INFO("$file:$line PASS $call_description => $call_status->result_");
}

$gigel = new RpcServiceWrapperGigel($rpc_connection, "gigel");
$call_status = $gigel->DoSomething(1, 3.14);
TEST_SUCCESS("gigel->DoSomething(1, 3.14)", 4, $call_status, __FILE__, __LINE__);
$call_status = $gigel->DoSomething(-1, 2.71);
TEST_SUCCESS("gigel->DoSomething(-1, 2.71)", 1, $call_status, __FILE__, __LINE__);
$call_status = $gigel->DoSomething(-3, 2.71);
TEST_SUCCESS("gigel->DoSomething(-3, 2.71)", -1, $call_status, __FILE__, __LINE__);
$call_status = $gigel->DoSomethingElse();
TEST_SUCCESS("gigel->DoSomethingElse()", NULL, $call_status, __FILE__, __LINE__);

$mitica = new RpcServiceWrapperMitica($rpc_connection, "mitica");
$call_status = $mitica->Initialize("acasa pe stanga", 7);
TEST_SUCCESS("mitica->Initialize('acasa pe stanga', 7)", true, $call_status, __FILE__, __LINE__);
$call_status = $mitica->Finish();
TEST_SUCCESS("mitica->Finish()", NULL, $call_status, __FILE__, __LINE__);
$call_status = $mitica->Initialize("acasa pe stanga", 7);
TEST_SUCCESS("mitica->Initialize('acasa pe stanga', 7)", true, $call_status, __FILE__, __LINE__);
$call_status = $mitica->TestMe(3, 5.79, "prepelita ciripeste");
TEST_SUCCESS("mitica->TestMe(3, 5.79, 'prepelita ciripeste')", 8, $call_status, __FILE__, __LINE__);
$call_status = $mitica->TestMe(3, -5.79, "prepelita ciripeste");
TEST_SUCCESS("mitica->TestMe(3, -5.79, 'prepelita ciripeste')", -2, $call_status, __FILE__, __LINE__);
$call_status = $mitica->Foo(new DateTime());
TEST_SUCCESS("mitica->Foo(new DateTime()", "acasa pe stanga", $call_status, __FILE__, __LINE__);

$person = new Person();
$person->name_ = "MyName1";
$person->age_ = 71;
$call_status = $mitica->SetPerson($person);
TEST_SUCCESS("mitica->SetPerson($person)", NULL, $call_status, __FILE__, __LINE__);
$call_status = $mitica->GetPerson();
TEST_SUCCESS("mitica->GetPerson()", $person, $call_status, __FILE__, __LINE__);

$person = new Person();
$person->name_ = "MyName2";
$person->age_ = 71;
$person->height_ = 1.71;
$person->married_ = false;
$call_status = $mitica->SetPerson($person);
TEST_SUCCESS("mitica->SetPerson(person)", NULL, $call_status, __FILE__, __LINE__);
$call_status = $mitica->GetPerson();
TEST_SUCCESS("mitica->GetPerson()", $person, $call_status, __FILE__, __LINE__);

$mother = new Person();
$mother->name_ = "MotherA";
$mother->age_ = 256;
$mother->height_ = -1.75;
$mother->married_ = true;
$father = new Person();
$father->name_ = "FatherB";
$father->age_ = -3;
$father->height_ = 1.75;
$father->married_ = false;
$children = array($mother, $father);
$family = new Family();
$family->mother_ = $mother;
$family->father_ = $father;
$family->children_ = $children;
$call_status = $mitica->SetFamily($mother, $father, $children);
TEST_SUCCESS("mitica->SetFamily($mother, $father, $children)", $family, $call_status, __FILE__, __LINE__);
$call_status = $mitica->GetChildren();
TEST_SUCCESS("mitica->GetChildren()", $children, $call_status, __FILE__, __LINE__);
$call_status = $mitica->Finish();
TEST_SUCCESS("mitica->Finish()", NULL, $call_status, __FILE__, __LINE__);

/*
function AsyncRetGlobalGetTribeByPosition(callStatus, result)
{
  LOG_INFO("AsynRetGlobalGetTribeByPosition: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}
function AsyncRetGlobalAddTribe(callStatus, result)
{
  LOG_INFO("AsynRetGlobalAddTribe: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}
function AsyncRetGlobalCreateTribe(callStatus, result)
{
  LOG_INFO("AsynRetGlobalCreateTribe: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}
function AsyncRetGlobalSetTribeHead(callStatus, result)
{
  LOG_INFO("AsynRetGlobalSetTribeHead: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}
function AsyncRetGlobalGetTribeVillager(callStatus, result)
{
  LOG_INFO("AsynRetGlobalGetTribeVillager: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}
function AsyncRetGlobalClear(callStatus, result)
{
  LOG_INFO("AsynRetGlobalClear: result=" + result + "  " + ExpectedSuccess(callStatus.userData_, result));
}

nullTribe = new Tribe();
nullTribe.name_ = "";
nullTribe.people_ = new Array();
  
nullVillager = Villager();
nullVillager.ID_ = 0;
nullVillager.name_ = "";

nullPeople = new Array();

aVillager0 = new Villager()
aVillager0.ID_ = 123;
aVillager0.name_ = "a person 123";

aVillager1 = new Villager();
aVillager1.ID_ = 321;
aVillager1.name_ = "a person 321";
aVillager1.height_ = 1.7;
aVillager1.parentID_ = aVillager0.ID_;

aVillager2 = new Villager();
aVillager2.ID_ = 456;
aVillager2.name_ = "a person 456";
aVillager2.height_ = 1.9;
aVillager2.childrenIDs_ = new Array(2);
aVillager2.childrenIDs_[0] = aVillager0.ID_;
aVillager2.childrenIDs_[1] = aVillager1.ID_;

aTribe = new Tribe();
aTribe.name_ = "tribe a";
RPCMap<RPCBigInt, Villager> & aPeopleMap = aTribe.people_.Ref();
aPeopleMap[aVillager0.ID_.Get()] = aVillager0;
aPeopleMap[aVillager1.ID_.Get()] = aVillager1;
aPeopleMap[aVillager2.ID_.Get()] = aVillager2;

RPCArray<Villager> aPeopleArray(3);
aPeopleArray[0] = aVillager0;
aPeopleArray[1] = aVillager1;
aPeopleArray[2] = aVillager2;

Tribe saTribe = aTribe;
saTribe.name_ = RPCString("tribe second a");

Tribe bTribe;
bTribe.name_ = RPCString("tribe b");
bTribe.people_.Ref();

Tribe sbTribe = bTribe;
sbTribe.name_ = RPCString("tribe second b");

// create tribe 'c'
Villager & cVillager0 = aVillager2;
Tribe cTribe;
cTribe.name_ = RPCString("tribe c");
cTribe.people_.Ref()[cVillager0.ID_.Get()] = cVillager0;
RPCArray<Villager> cPeopleArray(1);
cPeopleArray[0] = cVillager0;

///////////////////////////////////////////////
// by global result callbacks
//
RPCServiceWrapperGlobal wGlobal(rpcConnection);

ASYNC_TEST_GLOBAL_CALLBACK(Global, Clear, RPCVoid()); // always start with a clean world
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, nullTribe, RPCInt(1),RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, nullTribe, RPCInt(-1), RPCInt(-3));

// Add tribe "a"
ASYNC_TEST_GLOBAL_CALLBACK(Global, AddTribe, RPCBool(true ), aTribe, RPCInt(1), RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, AddTribe, RPCBool(false), aTribe, RPCInt(1), RPCInt(3));

// Verify tribe 'a' exists
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, aTribe, RPCInt(1), RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, nullTribe,RPCInt(1),RPCInt(2));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, aTribe, RPCInt(1), RPCInt(3));

// Verify tribe 'a' persons
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, nullVillager, RPCString("tribe aa"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, nullVillager, RPCString("tribe a"), RPCBigInt(-2));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager0, RPCString("tribe a"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager1, RPCString("tribe a"), aVillager1.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager2, RPCString("tribe a"), aVillager2.ID_.Get());

// Create a duplicate 'a' tribe. 
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe new a"), nullPeople, RPCInt(1), RPCInt(3)); // position already taken
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe a"), nullPeople, RPCInt(1), RPCInt(2)); // name already taken
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, saTribe, RPCString("tribe second a"), aPeopleArray, RPCInt(1), RPCInt(2)); // success

// Verify tribe 'second a' persons
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, nullVillager, RPCString("tribe second aa"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, nullVillager, RPCString("tribe second a"), RPCBigInt(-2));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager0, RPCString("tribe second a"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager1, RPCString("tribe second a"), aVillager1.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, aVillager2, RPCString("tribe second a"), aVillager2.ID_.Get());

// Add tribe "b"
ASYNC_TEST_GLOBAL_CALLBACK(Global, AddTribe, RPCBool(true ), bTribe, RPCInt(-2), RPCInt(-5));
ASYNC_TEST_GLOBAL_CALLBACK(Global, AddTribe, RPCBool(false), bTribe, RPCInt(-2), RPCInt(-5));

// Verify tribe 'b' exists
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, bTribe, RPCInt(-2), RPCInt(-5));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, nullTribe,RPCInt(-2),RPCInt(-2));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, bTribe, RPCInt(-2), RPCInt(-5));

// Create a duplicate 'b' tribe.
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe new b"), nullPeople, RPCInt(-2), RPCInt(-5)); // position already taken
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe b"), nullPeople, RPCInt(-2), RPCInt(-3)); // name already taken
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, sbTribe, RPCString("tribe second b"), nullPeople, RPCInt(-2), RPCInt(-3)); // success

// set head of tribe 'a'
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(-1), RPCString("tribe aa"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(-1), RPCString("tribe a"), RPCBigInt(-1));
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(0), RPCString("tribe a"), aVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, aVillager0.ID_.Ref(), RPCString("tribe a"), aVillager1.ID_.Get());

// Verify tribe 'a' correctness
aTribe.head_id_ = aVillager1.ID_; // !!! set it also local. Don't forget to roll back!
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, aTribe, RPCInt(1), RPCInt(3));
aTribe.head_id_ = 0; // roll back

// create tribe 'c'
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe a"), cPeopleArray, RPCInt(3), RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, nullTribe, RPCString("tribe second b"), cPeopleArray, RPCInt(3), RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, CreateTribe, cTribe, cTribe.name_.Get(), cPeopleArray, RPCInt(3), RPCInt(3));

// set tribe 'c' head 
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(-1), RPCString("tribe cc"), cVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(-1), RPCString("tribe c"), RPCBigInt(-1));
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, RPCBigInt(0), RPCString("tribe c"), cVillager0.ID_.Get());
ASYNC_TEST_GLOBAL_CALLBACK(Global, SetTribeHead, cVillager0.ID_.Ref(), RPCString("tribe c"), cVillager0.ID_.Get());

// Verify tribe 'c' correctness
cTribe.head_id_ = cVillager0.ID_; // !!! set it also local. Don't forget to roll back!
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeByPosition, cTribe, RPCInt(3), RPCInt(3));
ASYNC_TEST_GLOBAL_CALLBACK(Global, GetTribeVillager, cVillager0, RPCString("tribe c"), cVillager0.ID_.Get());
cTribe.head_id_.Reset(); // roll back
*/

?>
